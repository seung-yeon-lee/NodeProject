extends layout

block content
  h1= title
  a#exit-btn(href='/') 방 나가기
  fieldset
    legend 채팅 내용
    #chat-list
      for chat in chats
        if chat.user === user
          .mine(style='color:' + chat.user)
            div= chat.user 
            if chat.gif
              img(src='/gif/' + chat.gif)
            else
              div= chat.chat
        else if chat.user === 'system'
          .system
            div= chat.chat
        else
          .other(style='color:' + chat.user)
            div= chat.user
            if chat.gif
              img(src='/gif/' + chat.gif)
            else
              div= chat.chat
  form#chat-form(action='/chat' method='post' enctype='multipart/form-data')
    label(for='gif') GIF 올리기
    input#gif(type='file' name='gif' accept='image/gif')
    input#chat(name='chat')
    button(type='submit') 전송
  script(src='/socket.io/socket.io.js')
  script.
    var socket = io.connect('http://localhost:8005/chat', { //main과 다르게 네임스페이스가 /chat, /room 네임스페이스로 보낸 데이터는 받을 수 없고 /chat으로 보낸
      path: '/socket.io'                        //-것만 받을수 있음 join.exit 이벤트 리스너 연결 입/퇴장에 관한 데이터가 웹 소켓으로 전송될 때 호출
    });
    socket.on('join', function (data) {
      var div = document.createElement('div');
      div.classList.add('system');
      var chat = document.createElement('div');
      div.textContent = data.chat;
      div.appendChild(chat);
      document.querySelector('#chat-list').appendChild(div);
    });
    socket.on('exit', function (data) {
      var div = document.createElement('div');
      div.classList.add('system');
      var chat = document.createElement('div');
      div.textContent = data.chat;
      div.appendChild(chat);
      document.querySelector('#chat-list').appendChild(div);
    });

    //-채팅구현 프런트에서는 서버에서 보내는 채탱 데이터를 받을 소켓 이벤트 리스너가 필요함
    socket.on('chat', function (data) { //- chat 이벤트 리스너 추가 채팅메세지가 웹 소켓으로 전송될 떄 호출
      var div = document.createElement('div');
      if (data.user === '#{user}') {  //-채팅 메세지 발송자(data.user)에 따라 내 메세지인지 남의 메세지인지 확인한 후 렌더링
        div.classList.add('mine');
      } else {
        div.classList.add('other');
      }
      var name = document.createElement('div');
      name.textContent = data.user;
      div.appendChild(name);
      if (data.chat) {
        var chat = document.createElement('div');
        chat.textContent = data.chat;
        div.appendChild(chat);
      } else {
        var gif = document.createElement('img');
        gif.src = '/gif/' + data.gif;
        div.appendChild(gif);
      }
      div.style.color = data.user;
      document.querySelector('#chat-list').appendChild(div);
    });
      document.querySelector('#chat-form').addEventListener('submit', function (e) { 
      e.preventDefault();   //- 현재 채팅방은 내용을 DB에 저장하므로 라우터를 거쳐야함...  ROUTES => index.js에 작성
      if (e.target.chat.value) {
        var xhr = new XMLHttpRequest();
        xhr.onload = function () {
          if (xhr.status === 200) {
            e.target.chat.value = '';
          } else {
            console.error(xhr.responseText);
          }
        };
        xhr.open('POST', '/room/#{room._id}/chat');
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify({ chat: this.chat.value }));
      }
    });
    //- 이미지 전송 구현
     document.querySelector('#gif').addEventListener('change', function(e){
       var formData = new FormData();
       var xhr = new XMLHttpRequest();
       console.log(e.target.files);
       formData.append('gif', e.target.files[0]);
       xhr.onload = function (){
         if(xhr.status === 200){
           e.target.file = null;
         }else{
           console.error(xhr.responseText);
         }
       };
       xhr.open('POST', '/room/#{room._id}/gif');
       xhr.send(formData)
     });